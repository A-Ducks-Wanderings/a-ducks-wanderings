{
    id: "charles",
	solid_dimensions: ["common"],
    collide_dimensions: ["item"],
    editor_info: {
        category: "player"
    },
    feet_width: 12,
    properties: {
        speed_x: { type: "decimal", default: 0.0, persistent: false },
        speed_y: { type: "decimal", default: 0.0, persistent: false },
        ctrl_run: { type: "bool", default: false, persistent: false },
        _key_state: { type: "{string -> bool}", default: {} },
        gravity: { type: "decimal", default: 1.0, persistent: false },
        friction_x: { type: "decimal", default: 0.8, persistent: false },
        action: { type: "string", default: "stand", persistent: false },
        coyote_time: { type: "decimal", default: 999.0, persistent: false }
    },

    on_end_stand_anim: "[
        set(animation, 'stand')
    ]",

    on_end_walk_anim: "[
        set(animation, 'walk')
    ]",

    on_end_jump_anim: "[
        set(animation, 'jump')
    ]",

    on_end_fall_anim: "[
        set(animation, 'fall')
    ]",

    on_end_glide_anim: "[
        set(animation, 'glide')
    ]",

	on_ctrl_a: "[
		if(coyote_time < 10, [
            //set(y, y - 2);
            set(action, 'jump');
			set(speed_y, -30)
		], [
            if(action = 'fall', [
                set(action, 'glide')
            ])
        ])
	]",

    on_process: "[
        // key press event handler
        map(ctrl_keys, 'key', [
            if(not key in _key_state, [
                set(_key_state[key], true),
                fire_event('ctrl_' + key)
            ], [
                if(_key_state[key] = false, [
                    set(_key_state[key], true),
                    fire_event('ctrl_' + key)
                ])
            ])
        ]),
        map(keys(_key_state), 'key', [
            if(not key in ctrl_keys, [
                set(_key_state[key], false)
            ])
        ]),

        set(ctrl_run, ('d' in ctrl_keys)),
        if((ctrl_left or ctrl_right) and animation in ['stand'], [
            set(animation, 'walk')
        ]);

        // set action states
        if(is_standing, [
            set(action, 'stand'),
        ], [
			if(speed_y > 0 and not action = 'glide', [
                set(action, 'fall')
            ], [
                if(not action = 'glide', [
                    set(action, 'jump')
                ])
            ])
		]);
        
        // handle action states
        if(action = 'stand', [
            if(not animation in ['stand', 'walk'], [
                set(animation, 'stand')
            ]);
            set(speed_x, speed_x * friction_x),
			set(coyote_time, 0)
        ]);

        if(action in ['jump', 'fall', 'glide'], [
            set(speed_x, if(ctrl_left or ctrl_right, if(ctrl_left, -1, 1)) * 10),
        ]);

        if(action = 'jump', [
            set(coyote_time, 999),
            if(not animation in ['jump'], [
                set(animation, 'jump')
            ])
        ]);

        if(action = 'glide', [
            if(not animation in ['glide'], [
                set(animation, 'glide')
            ]),
            if(not ('a' in ctrl_keys), [
                set(action, 'fall')
            ])
        ]);

        if(action = 'fall', [
            set(coyote_time, coyote_time + 1),
            if(not animation in ['fall'], [
                set(animation, 'fall')
            ]),
        ]);
        
        // physics
        if(ctrl_left or ctrl_right, [
            set(facing, if(ctrl_left, -1, 1))
        ]);
        if(action in ['glide'], [
            set(gravity, .08)
        ], [
            set(gravity, 1.0)
        ]);

        add(speed_y, gravity);

        if(abs(speed_x) < 1, [
            set(speed_x, 0)
        ]);
        if(abs(speed_y) < 1, [
            set(speed_y, 0)
        ]);
        
        if(not is_standing, [
            set(speed_y, (speed_y + gravity) * 0.94),
        ]);
        
        //Apply x/y changes and check if they worked -- if not, we hit a wall.
        let original_x = x;
        add(x, speed_x);
        if(((original_x = x) and (abs(speed_x)>1)), [
            fire_event('x_move_failed')
        ]);
        set(velocity_x, 0);
        set(velocity_y, 0);
        
        let original_y = y;
        add(y, speed_y);
        if(((original_y = y) and (abs(speed_y)>1)), [
            fire_event('y_move_failed')
        ]);
        
        if(original_x = x and abs(speed_x)>1, fire_event('x_move_failed'));

        if(y > level.dimensions[3], [
            die()
        ])
    ]",
    
    on_x_move_failed: "
        set(speed_x, speed_x-sign(speed_x));
        
        let original_x = x;
        add(x, speed_x);
        if(((original_x = x) and (abs(speed_x)>1)), [
            fire_event('x_move_failed')
        ])
    ",
    
    on_y_move_failed: "
        set(speed_y, speed_y-sign(speed_y));
        
        let original_y = y;
        add(y, speed_y);
        if(((original_y = y) and (abs(speed_y)>1)), [
            fire_event('y_move_failed')
        ])
    ",

    on_process_walk: "if(not (ctrl_left or ctrl_right), [
        set(animation, 'stand')
    ], [
        set(speed_x, if(ctrl_left, -1, 1) * 8)
    ])",

    on_collide_feet: "[
        if(arg.collide_with is obj gomp, [
            set(arg.collide_with.animation, 'stomped'),
			add(speed_y, -speed_y * 2),
            set(animation, 'jump')  
        ])
    ]",

    animation: [
        {
            "@base": true,
            image: "characters/charles-spritesheet1.png",
            pad: 3,
            solid_area: [10, 4, 21, 30],
            item_area: [9, 3, 22, 31],
            feet_width: 12
        },
        {
            id: "stand",
            rect: [2, 2, 33, 33],
            duration: 12,
            frames: 2,
        },
        {
            id: "walk",
            rect: [2, 72, 33, 103],
            duration: 4,
            frames: 4
        },
        {
            id: "jump",
            rect: [2, 142, 33, 173],
            duration: 4,
            frames: 2
        },
        {
            id: "glide",
            rect: [2, 247, 33, 278],
            duration: 8,
            frames: 4
        },
        {
            id: "fall",
            rect: [2, 107, 33, 138],
            duration: 8,
            frames: 3
        },
        {
            id: "hurt",
            rect: [2, 352, 33, 383],
            duration: 8,
            frames: 1
        }
    ]
}