{
    id: "charles",
	solid_dimensions: ["common"],
    collide_dimensions: ["item"],
    editor_info: {
        category: "player"
    },
    feet_width: 12,
    friction: 1000,
    zorder: 100,
    properties: {
        speed_x: { type: "decimal", default: 0.0, persistent: false },
        speed_y: { type: "decimal", default: 0.0, persistent: false },
        ctrl_run: { type: "bool", default: false, persistent: false },
        _key_state: { type: "{string -> bool}", default: {} },
        gravity: { type: "decimal", default: 1.0, persistent: false },
        friction_x: { type: "decimal", default: 0.8, persistent: false },
        state: { type: "string", default: "stand", persistent: false },
        coyote_time: { type: "decimal", default: 999.0, persistent: false },
        oldState: { type: "string", default: "stand", persistent: false },
        currentStateDuration: { type: "decimal", default: 0.0, persistent: false },
        key_jump: { type: "string", default: "a", persistent: false },
        key_run: { type: "string", default: "d", persistent: false },
        should_be_standing: "bool <- self.state in ['stand', 'run', 'walk', 'land', 'crouch']",
        walking_speed_cap: {type: "decimal", default: 6.0, persistent: false},
        jumpPressRememberTime: {type: "decimal", default: 0.2, persistent: false},
        jumpPressRemember: {type: "decimal", default: 0.0, persistent: false},
        jumpSpeed: {type: "decimal", default: 15.0}
    },

    on_end_stand_anim: "[
        set(animation, 'stand')
    ]",

    on_end_walk_anim: "[
        set(animation, 'walk')
    ]",

    on_end_jump_anim: "[
        set(animation, 'jump')
    ]",

    on_end_fall_anim: "[
        set(animation, 'fall')
    ]",

    on_end_glide_anim: "[
        set(animation, 'glide')
    ]",

    on_end_run_anim: "[
        set(animation, 'run')
    ]",

    on_create: "[
        set(tick, 0)
    ]",

    on_ctrl_a: "[
        set(jumpPressRemember, jumpPressRememberTime)
    ]",

    on_process: "[
        set(jumpPressRemember, jumpPressRemember - 1),
        /////////////////////////// checks ///////////////////////////

        // key press event handler
        map(ctrl_keys, 'key', [
            if(not key in _key_state, [
                set(_key_state[key], true),
                fire_event('ctrl_' + key)
            ], [
                if(_key_state[key] = false, [
                    set(_key_state[key], true),
                    fire_event('ctrl_' + key)
                ])
            ])
        ]),
        map(keys(_key_state), 'key', [
            if(not key in ctrl_keys, [
                set(_key_state[key], false)
            ])
        ]),

        set(ctrl_run, (key_run in ctrl_keys)),

        /////////////////////////// controls ///////////////////////////

        if(ctrl_left or ctrl_right, [
            if(should_be_standing, [
                set(oldState, state),
                set(state, 'walk')
            ])
        ]);
    

        /////////////////////////// handlers ///////////////////////////

        if(state in ['stand'], [
            set(animation, 'stand'),
            set(speed_x, if(ctrl_left, -1, 1)*(speed_x *0.8))
        ]);

        if(state in ['walk'], [
            if(not animation in ['walk'], [
                set(animation, 'walk')
            ]),
            if(not(ctrl_left or ctrl_right), [
                set(speed_x, if(ctrl_left, -1, 1)*(speed_x *0.8)),
                if(abs(speed_x) < 0.1, [
                    set(oldState, state),
                    set(state, 'stand')
                ])
            ], [
                set(speed_x, speed_x + if(ctrl_left, -1, 1)*2.5),
                if(abs(speed_x) > 5, [
                    set(speed_x, if(speed_x < 0, -walking_speed_cap, walking_speed_cap))
                ])
            ])
        ]);

        debug(state),

        if(state in ['jump'], [
            if(not animation in ['jump'], [
                set(animation, 'jump')
            ]),
            if(not(ctrl_left or ctrl_right), [
                set(speed_x, if(ctrl_left, -1, 1)*(speed_x *0.8)),
                if(abs(speed_x) < 0.1, [
                    set(oldState, state),
                    set(state, 'jump')
                ])
            ], [
                set(speed_x, speed_x + if(ctrl_left, -1, 1)*2.5),
                if(abs(speed_x) > 5, [
                    set(speed_x, if(speed_x < 0, -walking_speed_cap, walking_speed_cap))
                ])
            ]),
            if(is_standing, [
                set(state, 'stand')
            ])
        ]);
        
        if((jumpPressRemember > 0) and should_be_standing, [
            set(jumpPressRemember, 0),
            set(oldState, state),
            set(state, 'jump'),
            add(speed_y, -jumpSpeed)
        ]);

        /////////////////////////// physics ///////////////////////////
        if(ctrl_left or ctrl_right, [
            set(facing, if(ctrl_left, -1, 1))
        ]);

        add(speed_y, gravity);

        if(abs(speed_x) < 1, [
            set(speed_x, 0)
        ]);
        if(abs(speed_y) < 1, [
            set(speed_y, 0)
        ]);
        
        //Apply x/y changes and check if they worked -- if not, we hit a wall.
        let original_x = x;
        add(x, speed_x);
        if(((original_x = x) and (abs(speed_x)>1)), [
            fire_event('x_move_failed')
        ]);
        set(velocity_x, 0);
        set(velocity_y, 0);
        
        let original_y = y;
        add(y, speed_y);
        if(((original_y = y) and (abs(speed_y)>1)), [
            fire_event('y_move_failed')
        ]);
        
        if(original_x = x and abs(speed_x)>1, fire_event('x_move_failed'));

        if(y > level.dimensions[3], [
            die()
        ])
    ]",
    
    on_x_move_failed: "
        set(speed_x, speed_x-sign(speed_x));
        
        let original_x = x;
        add(x, speed_x);
        if(((original_x = x) and (abs(speed_x)>1)), [
            fire_event('x_move_failed')
        ])
    ",
    
    on_y_move_failed: "
        set(speed_y, speed_y-sign(speed_y));
        
        let original_y = y;
        add(y, speed_y);
        if(((original_y = y) and (abs(speed_y)>1)), [
            fire_event('y_move_failed')
        ])
    ",

    animation: [
        {
            "@base": true,
            image: "characters/charles-spritesheet1.png",
            pad: 3,
            solid_area: [10, 4, 21, 30],
            item_area: [9, 3, 22, 31],
            feet_width: 12
        },
        {
            id: "stand",
            rect: [2, 2, 33, 33],
            duration: 12,
            frames: 2,
        },
        {
            id: "walk",
            rect: [2, 72, 33, 103],
            duration: 4,
            frames: 4
        },
        {
            id: "jump",
            rect: [2, 142, 33, 173],
            duration: 4,
            frames: 2
        },
        {
            id: "fall",
            rect: [2, 107, 33, 138],
            duration: 4,
            frames: 4
        }
    ]
}